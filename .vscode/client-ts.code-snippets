{
	"vue-ts CRUD controller": {
		"prefix": "vts-crud",
		"body": [
			"import Vue from 'vue'",
			"import Component from 'vue-class-component'",
			"import { create$1 } from '@/models'",
			"import { $1 } from '@/models'",
			"",
			"@Component({})",
			"export default class $1Controller extends Vue {",
			"  /********************************************************",
			"   *                      Attributes                       *",
			"   ********************************************************/",
			"",
			"  // GUI",
			"  private isValidForm = false",
			"",
			"  // Element data",
			"  private elements: $1[] = []",
			"  private elementIndex = -1",
			"  private element: $1 = create$1()",
			"",
			"  // Validations",
			"  private rules: object = {}",
			"",
			"  /********************************************************",
			"   *                     Initializable                     *",
			"   ********************************************************/",
			"",
			"  async beforeMount(): Promise<void> {}",
			"",
			"  /********************************************************",
			"   *                    API Services                       *",
			"   ********************************************************/",
			"  async createElement(): Promise<void> {}",
			"",
			"  async findElements(): Promise<void> {}",
			"",
			"  async updateElement(): Promise<void> {}",
			"",
			"  async deleteElement(element: $1): Promise<void> {}",
			"",
			"  async submit(): Promise<void> {",
			"    // eslint-disable-next-line",
			"    //@ts-expect-error",
			"    await this.\\$refs.form.validate()",
			"    if (this.isValidForm === true) {",
			"      if (this.elementIndex > -1) await this.updateElement()",
			"      else await this.createElement()",
			"    }",
			"    this.reset()",
			"  }",
			"",
			"  /********************************************************",
			"   *                       Methods                         *",
			"   ********************************************************/",
			"",
			"  toEditElement(element: $1): void {",
			"    this.elementIndex = this.elements.indexOf(element)",
			"    this.element = Object.assign({}, element)",
			"  }",
			"",
			"  reset(): void {",
			"    this.elementIndex = -1",
			"    this.element = create$1()",
			"    //@ts-expect-error",
			"    this.\\$refs.form.reset()",
			"  }",
			"}",
			""
		],
		"description": "vue-ts CRUD controller"
	},
	"vue-ts component": {
		"prefix": "vts-component",
		"body": [
			"<template>",
			"  <div>$1</div>",
			"</template>",
			"",
			"<script lang=\"ts\">",
			"import Vue from 'vue'",
			"import Component from 'vue-class-component'",
			"import { Prop } from 'vue-property-decorator'",
			"",
			"@Component({})",
			"export default class $1Component extends Vue {",
			"  @Prop() title!: string",
			"}",
			"</script>",
			""
		],
		"description": "vue-ts component"
	},
	"vue-ts component with v-model": {
		"prefix": "vts-model-component",
		"body": [
			"<template>",
			"  <div>$1</div>",
			"</template>",
			"",
			"<script lang=\"ts\">",
			"import Vue from 'vue'",
			"import Component from 'vue-class-component'",
			"import { Prop } from 'vue-property-decorator'",
			"import { Emit } from 'vue-property-decorator'",
			"",
			"@Component({})",
			"export default class $1Component extends Vue {",
			"  @Prop() value!: $2",
			"",
			"  @Emit('input')",
			"  input(value: $2): $2 {",
			"    return value",
			"  }",
			"}",
			"</script>"
		],
		"description": "vue-ts component with v-model"
	},
	"vue-ts page": {
		"prefix": "vts-page",
		"body": [
			"<template>",
			"  <div>$1</div>",
			"</template>",
			"",
			"<script lang=\"ts\">",
			"//@ts-ignore",
			"import Controller from './$1Controller'",
			"export default Controller",
			"</script>",
			""
		],
		"description": "vue-ts page"
	}
}
